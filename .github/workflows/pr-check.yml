name: PR Check

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          .pio
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        
    - name: Install PlatformIO
      run: pip install platformio
      
    - name: Build Firmware
      run: pio run
      
    - name: Check Firmware Size
      run: |
        SIZE=$(stat -c%s .pio/build/esp32dev/firmware.bin)
        MAX_SIZE=524288  # 512KB limit untuk factory partition
        
        echo "Firmware size: $SIZE bytes"
        echo "Max allowed: $MAX_SIZE bytes (512KB)"
        
        if [ $SIZE -gt $MAX_SIZE ]; then
          echo "‚ùå ERROR: Firmware terlalu besar!"
          echo "Firmware harus <= 512KB untuk fit di factory partition"
          exit 1
        else
          PERCENT=$((SIZE * 100 / MAX_SIZE))
          echo "‚úÖ OK: Menggunakan ${PERCENT}% dari factory partition"
        fi
        
    - name: Validate Partition Table
      run: |
        echo "Validating partitions.csv..."
        
        # Check if file exists
        if [ ! -f "partitions.csv" ]; then
          echo "‚ùå ERROR: partitions.csv not found!"
          exit 1
        fi
        
        # Check required partitions
        for partition in nvs otadata phy_init factory ota_0 ota_1 spiffs; do
          if ! grep -q "^$partition," partitions.csv; then
            echo "‚ùå ERROR: Missing partition: $partition"
            exit 1
          fi
        done
        
        echo "‚úÖ All required partitions present"
        
        # Calculate total size
        TOTAL_SIZE=0
        while IFS=',' read -r name type subtype offset size flags; do
          # Skip comments and header
          [[ "$name" =~ ^#.*$ ]] && continue
          [[ "$name" == "Name" ]] && continue
          [[ -z "$name" ]] && continue
          
          # Convert hex size to decimal
          if [[ "$size" =~ ^0x ]]; then
            SIZE_DEC=$((size))
            TOTAL_SIZE=$((TOTAL_SIZE + SIZE_DEC))
          fi
        done < partitions.csv
        
        MAX_FLASH=$((4 * 1024 * 1024))  # 4MB
        
        echo "Total partition size: $TOTAL_SIZE bytes"
        echo "Flash size: $MAX_FLASH bytes (4MB)"
        
        if [ $TOTAL_SIZE -gt $MAX_FLASH ]; then
          echo "‚ùå ERROR: Partitions exceed 4MB flash!"
          exit 1
        else
          PERCENT=$((TOTAL_SIZE * 100 / MAX_FLASH))
          echo "‚úÖ OK: Using ${PERCENT}% of flash"
        fi
        
    - name: Security Check
      run: |
        echo "Checking for hardcoded secrets..."
        
        # Check for common patterns
        if grep -r "password\s*=\s*\"[^\"]\+\"" src/ --include="*.cpp" --include="*.h"; then
          echo "‚ö†Ô∏è  WARNING: Found hardcoded password"
        fi
        
        if grep -r "api[_-]key\s*=\s*\"[^\"]\+\"" src/ --include="*.cpp" --include="*.h"; then
          echo "‚ö†Ô∏è  WARNING: Found hardcoded API key"
        fi
        
        echo "‚úÖ Security check complete"
        
    - name: Code Quality Check
      run: |
        pip install cpplint
        
        echo "Running code quality checks..."
        find src -name "*.cpp" -o -name "*.h" | \
          xargs cpplint --filter=-whitespace/line_length,-legal/copyright,-build/include_subdir 2>&1 | \
          tee cpplint.log
        
        # Count errors (non-zero exit if critical errors found)
        ERRORS=$(grep -c "error:" cpplint.log || true)
        echo "Found $ERRORS cpplint errors"
        
        # We allow some errors but report them
        if [ $ERRORS -gt 50 ]; then
          echo "‚ö†Ô∏è  Too many code quality issues"
          exit 1
        fi
        
    - name: Comment PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîç PR Check Results\n\n';
          
          // Add build status
          comment += '### ‚úÖ Build Status\n';
          comment += 'Firmware compiled successfully\n\n';
          
          // Add size info
          const size = fs.statSync('.pio/build/esp32dev/firmware.bin').size;
          const percent = (size / 524288 * 100).toFixed(1);
          comment += '### üì¶ Firmware Size\n';
          comment += `- Size: ${size} bytes\n`;
          comment += `- Usage: ${percent}% of factory partition (512KB)\n\n`;
          
          // Add partition validation
          comment += '### üìä Partition Table\n';
          comment += '‚úÖ All required partitions present\n\n';
          
          comment += '---\n';
          comment += '*Automated check by GitHub Actions*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Check README
      run: |
        echo "Checking documentation completeness..."
        
        REQUIRED_SECTIONS=(
          "Quick Start"
          "Partition"
          "Build"
          "Flash"
          "Troubleshooting"
          "API"
        )
        
        MISSING=0
        for section in "${REQUIRED_SECTIONS[@]}"; do
          if ! grep -qi "$section" README.md; then
            echo "‚ùå Missing section: $section"
            MISSING=$((MISSING + 1))
          else
            echo "‚úÖ Found section: $section"
          fi
        done
        
        if [ $MISSING -gt 0 ]; then
          echo ""
          echo "‚ö†Ô∏è  README incomplete: $MISSING sections missing"
          exit 1
        fi
        
        echo ""
        echo "‚úÖ Documentation complete"
        
    - name: Check Code Comments
      run: |
        echo "Checking code documentation..."
        
        # Count functions without comments
        TOTAL_FUNCS=$(grep -r "^void \|^bool \|^int \|^String " src/ --include="*.cpp" | wc -l)
        COMMENTED_FUNCS=$(grep -B1 "^void \|^bool \|^int \|^String " src/ --include="*.cpp" | grep "//" | wc -l)
        
        PERCENT=$((COMMENTED_FUNCS * 100 / TOTAL_FUNCS))
        echo "Functions documented: ${PERCENT}%"
        
        if [ $PERCENT -lt 50 ]; then
          echo "‚ö†Ô∏è  Low documentation coverage"
        else
          echo "‚úÖ Good documentation coverage"
        fi
