name: Build BootSelector ESP32

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          .pio
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-
          
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        
    - name: Build firmware
      run: pio run
      
    - name: Create build info
      run: |
        echo "Build Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" > build_info.txt
        echo "Git Commit: ${{ github.sha }}" >> build_info.txt
        echo "Git Branch: ${{ github.ref_name }}" >> build_info.txt
        echo "Firmware Size:" >> build_info.txt
        ls -lh .pio/build/esp32dev/firmware.bin >> build_info.txt
        
    - name: Prepare artifacts
      run: |
        mkdir -p release
        cp .pio/build/esp32dev/firmware.bin release/bootselector.bin
        cp .pio/build/esp32dev/partitions.bin release/partitions.bin
        cp .pio/build/esp32dev/bootloader.bin release/bootloader.bin
        cp partitions.csv release/
        cp build_info.txt release/
        
        # Buat flash script untuk Windows
        cat > release/flash.bat << 'EOF'
        @echo off
        echo ================================================
        echo  BootSelector ESP32 - Flash Script
        echo ================================================
        echo.
        
        set ESPTOOL=esptool.py
        set PORT=COM3
        
        echo Detecting esptool...
        where %ESPTOOL% >nul 2>&1
        if %ERRORLEVEL% NEQ 0 (
            echo ERROR: esptool.py not found!
            echo Install: pip install esptool
            pause
            exit /b 1
        )
        
        echo.
        set /p PORT="Enter COM port (default: COM3): " || set PORT=COM3
        
        echo.
        echo Flashing BootSelector to %PORT%...
        echo.
        
        %ESPTOOL% --chip esp32 --port %PORT% --baud 921600 ^
          --before default_reset --after hard_reset write_flash ^
          -z --flash_mode dio --flash_freq 40m --flash_size detect ^
          0x1000 bootloader.bin ^
          0x8000 partitions.bin ^
          0x10000 bootselector.bin
        
        if %ERRORLEVEL% EQU 0 (
            echo.
            echo ================================================
            echo  Flash successful!
            echo  Connect to AP: BootSelector
            echo  Password: 12345678
            echo  Web UI: http://192.168.4.1
            echo ================================================
        ) else (
            echo.
            echo ERROR: Flash failed!
        )
        
        echo.
        pause
        EOF
        
        # Buat flash script untuk Linux/Mac
        cat > release/flash.sh << 'EOF'
        #!/bin/bash
        
        echo "================================================"
        echo " BootSelector ESP32 - Flash Script"
        echo "================================================"
        echo ""
        
        ESPTOOL="esptool.py"
        PORT="/dev/ttyUSB0"
        
        # Deteksi esptool
        if ! command -v $ESPTOOL &> /dev/null; then
            echo "ERROR: esptool.py not found!"
            echo "Install: pip install esptool"
            exit 1
        fi
        
        # Auto-detect port untuk Mac
        if [[ "$OSTYPE" == "darwin"* ]]; then
            PORT="/dev/cu.usbserial-0001"
            if [ ! -e "$PORT" ]; then
                PORT=$(ls /dev/cu.* 2>/dev/null | grep -i usb | head -1)
            fi
        fi
        
        # Tanya user untuk port
        read -p "Enter serial port (default: $PORT): " INPUT_PORT
        PORT=${INPUT_PORT:-$PORT}
        
        if [ ! -e "$PORT" ]; then
            echo "ERROR: Port $PORT not found!"
            echo "Available ports:"
            ls /dev/tty* 2>/dev/null | grep -E "(USB|ACM)"
            exit 1
        fi
        
        echo ""
        echo "Flashing BootSelector to $PORT..."
        echo ""
        
        $ESPTOOL --chip esp32 --port $PORT --baud 921600 \
          --before default_reset --after hard_reset write_flash \
          -z --flash_mode dio --flash_freq 40m --flash_size detect \
          0x1000 bootloader.bin \
          0x8000 partitions.bin \
          0x10000 bootselector.bin
        
        if [ $? -eq 0 ]; then
            echo ""
            echo "================================================"
            echo " Flash successful!"
            echo " Connect to AP: BootSelector"
            echo " Password: 12345678"
            echo " Web UI: http://192.168.4.1"
            echo "================================================"
        else
            echo ""
            echo "ERROR: Flash failed!"
            exit 1
        fi
        EOF
        
        chmod +x release/flash.sh
        
        # Buat README untuk release
        cat > release/README.txt << 'EOF'
        BootSelector ESP32 - Release Package
        =====================================
        
        Files Included:
        ---------------
        - bootselector.bin  : Main firmware
        - bootloader.bin    : ESP32 bootloader
        - partitions.bin    : Partition table
        - partitions.csv    : Partition layout (reference)
        - flash.bat         : Flash script for Windows
        - flash.sh          : Flash script for Linux/Mac
        - build_info.txt    : Build information
        
        Quick Flash Instructions:
        -------------------------
        
        Windows:
          1. Install esptool: pip install esptool
          2. Connect ESP32 via USB
          3. Run: flash.bat
          4. Enter your COM port (e.g., COM3)
        
        Linux/Mac:
          1. Install esptool: pip install esptool
          2. Connect ESP32 via USB
          3. Run: ./flash.sh
          4. Enter your port (e.g., /dev/ttyUSB0)
        
        Manual Flash (esptool):
        -----------------------
        esptool.py --chip esp32 --port YOUR_PORT --baud 921600 \
          --before default_reset --after hard_reset write_flash \
          -z --flash_mode dio --flash_freq 40m --flash_size detect \
          0x1000 bootloader.bin \
          0x8000 partitions.bin \
          0x10000 bootselector.bin
        
        After Flashing:
        ---------------
        1. ESP32 will create WiFi AP: "BootSelector"
        2. Password: "12345678"
        3. Connect and open: http://192.168.4.1
        4. Upload your apps (Spot Welding & DIY Charger)
        5. Use boot selector to switch between apps
        
        Support:
        --------
        GitHub: https://github.com/yourusername/BootSelector-ESP32
        Documentation: See main README.md in repository
        EOF
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bootselector-esp32-${{ github.sha }}
        path: release/
        retention-days: 90
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/bootselector.bin
          release/bootloader.bin
          release/partitions.bin
          release/partitions.csv
          release/flash.bat
          release/flash.sh
          release/build_info.txt
          release/README.txt
        body: |
          ## ðŸš€ BootSelector ESP32 ${{ github.ref_name }}
          
          ### ðŸ“¦ Pre-built Firmware
          Download dan flash langsung ke ESP32 (4MB flash).
          
          ### ðŸ“¥ Quick Start
          
          **Windows:**
          ```bash
          pip install esptool
          # Download semua files
          flash.bat
          ```
          
          **Linux/Mac:**
          ```bash
          pip install esptool
          # Download semua files
          chmod +x flash.sh
          ./flash.sh
          ```
          
          ### ðŸ“‹ Files
          - `bootselector.bin` - Firmware utama (flash ke 0x10000)
          - `bootloader.bin` - ESP32 bootloader (flash ke 0x1000)
          - `partitions.bin` - Partition table (flash ke 0x8000)
          - `flash.bat` / `flash.sh` - Script otomatis
          
          ### ðŸ”§ Setelah Flash
          1. Connect ke WiFi AP: **BootSelector** (pass: 12345678)
          2. Buka browser: **http://192.168.4.1**
          3. Upload firmware Spot Welding â†’ `ota_0`
          4. Upload firmware DIY Charger â†’ `ota_1`
          5. Gunakan tombol untuk switch mode
          
          ### ðŸ“– Full Documentation
          https://github.com/${{ github.repository }}
          
          ---
          Build: `${{ github.sha }}`
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install platformio
        pip install cpplint
        
    - name: Run PlatformIO check
      run: pio check --skip-packages
      continue-on-error: true
      
    - name: Check code formatting
      run: |
        echo "Checking C++ code style..."
        find src -name "*.cpp" -o -name "*.h" | xargs cpplint --filter=-whitespace/line_length,-legal/copyright
      continue-on-error: true
